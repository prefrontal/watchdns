#!/bin/bash
IFS=';' read -ra LISTEN_PORTS <<< "$1"
RESOLVE_NAME=$2
CONNECT_PORT=$3
if [ -z "$CONNECT_PORT" ]; then
    echo "Syntax: $0 <LISTEN_PORTS> <RESOLVE_NAME> <CONNECT_PORT>"
    exit 1
fi

# Following section taken from hamba directly.
# Output a valid HAProxy configuration.
config () {
    # Generate the global section of the config file.
    cat <<EOF
global
  daemon
  maxconn 256

defaults
  mode tcp
  timeout connect 5000ms
  timeout client 50000ms
  timeout server 50000ms
EOF

    # Generate frontends
    last_pos=$(( ${#LISTEN_PORTS[*]} - 1 ))
    last_location=${LISTEN_PORTS[$last_pos]}
    for location in "${LISTEN_PORTS[@]}"
    do
        cat <<EOF

frontend hamba-in
  bind $location
  default_backend hamba-out
EOF
    done

    # add backend header
    cat <<EOF

backend hamba-out
EOF

    # Now generate all the backend entries.
    shift
    # If the backend contains a semi-colon,
    # assume that it's addr:port. Otherwise,
    # assume that the backend address and port
    # are given by two separate parameters.
    for location in "${LISTEN_PORTS[@]}"
    do
        case "$location" in
        *:*)
            echo "  server $(echo ${location} | tr : -) $location maxconn 32 check"
            shift
            ;;
        *)
            echo "  server ${location}-$2 $location:$2 maxconn 32 check"
            shift
            shift
            ;;
        esac
    done

    # If ADMIN is set, enable admin.
    if [ "$ADMIN" ]; then cat <<EOF
listen admin
  mode http
  bind $ADMIN
  stats enable
EOF
    fi
}

# Hook to deal with signals correctly.
stop () {
    echo "Stopping main loop."
    # TODO nicely terminate HAProxy
    exit
}
trap stop TERM

RECORDS=""

while true; do
    config $LISTEN_PORTS
    NEW_RECORDS=$(
        drill $RESOLVE_NAME |
        awk '{ if (($1=="'$RESOLVE_NAME'.") && ($4=="A")) {print $5} }' |
        sort -n |
        tr "\n" " "
        )
    if [ "$RECORDS" = "$NEW_RECORDS" ]; then
        sleep 1
        continue
    fi
    echo "$RESOLVE_NAME changed from [ $RECORDS] to [ $NEW_RECORDS]"
    RECORDS="$NEW_RECORDS"
    config $LISTEN_PORTS $(for RECORD in $RECORDS; do 
                            echo $RECORD $CONNECT_PORT
                          done) >~/haproxy.tmp
    mv ~/haproxy.tmp ~/haproxy.new
done

